services:
  app-migrate: &anchor
    build: .
    volumes:
      - .:/app
    entrypoint: >
      sh -c "
      echo 'Starting migrations...' &&
      python manage.py showmigrations &&
      python manage.py makemigrations chat &&
      python manage.py makemigrations &&
      python manage.py migrate
      "

    environment:
      DB_PASSWORD: &db_password ${DB_PASSWORD:?DB_PASSWORD not provided}
      DB_USERNAME: &db_username ${DB_USERNAME:?DB_USERNAME not provided}
      DB_NAME: &db_name ${DB_NAME:?DB_NAME not provided}
      DB_HOST: &db_host ${DB_HOST:?DB_HOST not provided}
      DEBUG: ${DJANGO_DEBUG:-0}
    
    networks:
      - chat-network

    depends_on:
      db:
        condition: service_healthy


  app-createsuperuser:
    <<: *anchor
    environment:
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_NAME:?DJANGO_SUPERUSER_NAME not provided}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:?DJANGO_SUPERUSER_PASSWORD not provided}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:?DJANGO_SUPERUSER_EMAIL not provided}

    entrypoint: >
      sh -c "python manage.py createsuperuser --noinput"

    depends_on:
      app-migrate:
        condition: service_completed_successfully


  app-service:
    <<: *anchor

    networks:
      - chat-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 5s
      timeout: 5s
      retries: 50
      start_period: 2s

    entrypoint: >
      sh -c "daphne -b 0.0.0.0 -p 8000 chatsite.asgi:application"

    deploy:
      mode: replicated
      replicas: 1

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.appservice.rule=Host(`pwir.localhost`)"
      - "traefik.http.services.appservice.loadbalancer.server.port=8000"
      - "traefik.http.routers.appservice.entrypoints=web"

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      app-migrate:
        condition: service_completed_successfully


  reverse-proxy:
    image: traefik:v3.1
    networks:
      - chat-network
    command: 
      - "--api.insecure=true" 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  redis:
    image: redis:alpine
    networks:
      - chat-network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


  db:
    image: postgres

    volumes:
      - postgres_data:/var/lib/postgresql/data

    environment:
      POSTGRES_USER: *db_username
      POSTGRES_PASSWORD: *db_password
      POSTGRES_DB: *db_name
    
    networks:
      - chat-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $db_username -d $db_name"]

      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s


  worker-service:
    build: .

    volumes:
      - worker_data:/data

    command: python manage.py runworker background-tasks

    depends_on:
      redis:
        condition: service_healthy
      app-service:
        condition: service_healthy
        
    networks:
      - chat-network


volumes:
  postgres_data:
  redis_data:
  worker_data:


networks:
  chat-network:
    driver: bridge
